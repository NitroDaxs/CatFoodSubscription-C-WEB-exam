// <auto-generated />
using System;
using CatFoodSubscription.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatFoodSubscription.Data.Migrations
{
    [DbContext(typeof(CatFoodSubscriptionDbContext))]
    [Migration("20240302175803_SubscriptionProductOrderAdded")]
    partial class SubscriptionProductOrderAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identification for the address");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(58)
                        .HasColumnType("nvarchar(58)")
                        .HasComment("City of the address");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)")
                        .HasComment("Country of the address");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int")
                        .HasComment("PostalCode of the address");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Street of the address");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identification for the category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Name of the category");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wet Food"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dry Food"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Supplement"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Toy"
                        });
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the customer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Specifies if the customer account is deleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the customer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identification for the order");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasComment("Identification of the address");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identification of the customer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the order");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the shipment");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionBoxId")
                        .HasColumnType("int")
                        .HasComment("Identification of the subscriptionBox");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubscriptionBoxId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identification for the product");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Identification for the category of the product");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the product");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Path leading to the product's image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the product");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Description = "Essential cat calcium supplement for strong bones and teeth.",
                            ImageUrl = "https://i.ibb.co/frhS8TM/Catio-com-2.png",
                            Name = "Calcium",
                            Price = 8.99m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Description = "Boost your cat's coat and skin health with our Omega-3 supplement. Promotes a shiny coat and supports overall well-being.",
                            ImageUrl = "https://i.ibb.co/DzdTWbZ/6.png",
                            Name = "Omega-3",
                            Price = 9.99m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Maintain healthy digestion for your cat with our fiber supplement. Supports bowel regularity and digestive balance.",
                            ImageUrl = "https://i.ibb.co/wLCVbkz/Catio-com-3.png",
                            Name = "Fiber",
                            Price = 7.99m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Delicious wet cat food with real chicken for a savory dining experience.",
                            ImageUrl = "https://i.ibb.co/6PNYp8Q/Wet-Chicken.png",
                            Name = "Wet Chicken",
                            Price = 2.99m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "Nutritious dry cat food with chicken as the main ingredient. Supports overall health.",
                            ImageUrl = "https://i.ibb.co/vjHdjs2/Dry-Chicken.png",
                            Name = "Dry Chicken",
                            Price = 2.50m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Tasty wet cat food featuring real fish to satisfy your cat's seafood cravings.",
                            ImageUrl = "https://i.ibb.co/vVXjkg7/Wet-Fish.png",
                            Name = "Wet Fish",
                            Price = 3.99m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "High-quality dry cat food with fish for a protein-rich and flavorful meal.",
                            ImageUrl = "https://i.ibb.co/JshpRy2/Dry-Fish.png",
                            Name = "Dry Fish",
                            Price = 3.50m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Irresistible wet cat food with real beef, providing a source of premium protein.",
                            ImageUrl = "https://i.ibb.co/thzxbh1/Wet-Beef.png",
                            Name = "Wet Beef",
                            Price = 3.99m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Wholesome dry cat food featuring beef for a balanced and tasty diet.",
                            ImageUrl = "https://i.ibb.co/0FSfBhf/Dry-Beef.png",
                            Name = "Dry Beef",
                            Price = 3.50m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "Perfectly balanced dry cat food with a blend of chicken and turkey for optimal nutrition.",
                            ImageUrl = "https://i.ibb.co/XL7NV1D/Dry-Chicken-And-Turkey.png",
                            Name = "Dry Chicken & Turkey",
                            Price = 4.99m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "Indulge your cat with wet food featuring a delightful combination of salmon and chicken.",
                            ImageUrl = "https://i.ibb.co/WK3QYZ5/Wet-Chicken-And-Salmon.png",
                            Name = "Wet Salmon & Chicken",
                            Price = 3.99m
                        });
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.ProductOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Identification of the order");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Identification of the product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsOrders");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.ProductSubscriptionBox", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionBoxId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SubscriptionBoxId");

                    b.HasIndex("SubscriptionBoxId");

                    b.ToTable("ProductSubscriptionBoxes");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            SubscriptionBoxId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            SubscriptionBoxId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            SubscriptionBoxId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            SubscriptionBoxId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            SubscriptionBoxId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            SubscriptionBoxId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            SubscriptionBoxId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            SubscriptionBoxId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            SubscriptionBoxId = 3
                        });
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Delivery Center"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Picked up"
                        });
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.SubscriptionBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identification of the subscriptionBox");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Name of the subscriptionBox");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Path for subscriptionBox image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the subscriptionBox");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the subscriptionBox");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionBoxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Promote strong bones and teeth with this subscription box.",
                            ImageUrl = "https://i.ibb.co/yXPZG4G/1.png",
                            Name = "Bone Health",
                            Price = 15.49m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Enhance your cat's coat health for a shiny and lustrous fur.",
                            ImageUrl = "https://i.ibb.co/0QMLRbh/2.png",
                            Name = "Silky Fur",
                            Price = 17.49m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Support healthy digestion and bowel movements with this subscription box.",
                            ImageUrl = "https://i.ibb.co/GQQBknL/3.png",
                            Name = "Bowl Movement",
                            Price = 15.99m
                        });
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.SubscriptionProductOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Identification of the order");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Identification of the product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SubscriptionProductsOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Order", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("CatFoodSubscription.Data.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CatFoodSubscription.Data.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatFoodSubscription.Data.Models.SubscriptionBox", "SubscriptionBox")
                        .WithMany()
                        .HasForeignKey("SubscriptionBoxId");

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("Status");

                    b.Navigation("SubscriptionBox");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Product", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.ProductOrder", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Order", "Order")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CatFoodSubscription.Data.Models.Product", "Product")
                        .WithMany("ProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.ProductSubscriptionBox", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Product", "Product")
                        .WithMany("ProductSubscriptionBoxes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CatFoodSubscription.Data.Models.SubscriptionBox", "SubscriptionBox")
                        .WithMany("ProductSubscriptionBoxes")
                        .HasForeignKey("SubscriptionBoxId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubscriptionBox");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.SubscriptionProductOrder", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Order", "Order")
                        .WithMany("SubscriptionProductsOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CatFoodSubscription.Data.Models.Product", "Product")
                        .WithMany("SubscriptionProductsOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatFoodSubscription.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CatFoodSubscription.Data.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Order", b =>
                {
                    b.Navigation("ProductsOrders");

                    b.Navigation("SubscriptionProductsOrders");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.Product", b =>
                {
                    b.Navigation("ProductSubscriptionBoxes");

                    b.Navigation("ProductsOrders");

                    b.Navigation("SubscriptionProductsOrders");
                });

            modelBuilder.Entity("CatFoodSubscription.Data.Models.SubscriptionBox", b =>
                {
                    b.Navigation("ProductSubscriptionBoxes");
                });
#pragma warning restore 612, 618
        }
    }
}
